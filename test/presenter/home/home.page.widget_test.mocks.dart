// Mocks generated by Mockito 5.0.17 from annotations
// in teststudy/test/presenter/home/home.page.widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teststudy/core/http/models/base_exception.model.dart' as _i5;
import 'package:teststudy/domain/entities/original_url.entity.dart' as _i6;
import 'package:teststudy/domain/entities/short_url.entity.dart' as _i8;
import 'package:teststudy/domain/usecases/get_original_url.usecase.dart' as _i3;
import 'package:teststudy/domain/usecases/short_url.usecase.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetOriginalUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetOriginalUrlUseCase extends _i1.Mock
    implements _i3.GetOriginalUrlUseCase {
  MockGetOriginalUrlUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.BaseException, _i6.OriginalUrl>> call(String? id) =>
      (super.noSuchMethod(Invocation.method(#call, [id]),
              returnValue:
                  Future<_i2.Either<_i5.BaseException, _i6.OriginalUrl>>.value(
                      _FakeEither_0<_i5.BaseException, _i6.OriginalUrl>()))
          as _i4.Future<_i2.Either<_i5.BaseException, _i6.OriginalUrl>>);
}

/// A class which mocks [ShortUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortUrlUseCase extends _i1.Mock implements _i7.ShortUrlUseCase {
  MockShortUrlUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.BaseException, _i8.ShortUrl>> call(
          String? urlToBeShortened) =>
      (super.noSuchMethod(Invocation.method(#call, [urlToBeShortened]),
              returnValue:
                  Future<_i2.Either<_i5.BaseException, _i8.ShortUrl>>.value(
                      _FakeEither_0<_i5.BaseException, _i8.ShortUrl>()))
          as _i4.Future<_i2.Either<_i5.BaseException, _i8.ShortUrl>>);
}
