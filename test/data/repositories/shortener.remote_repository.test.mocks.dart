// Mocks generated by Mockito 5.0.17 from annotations
// in nubanktest/test/data/repositories/shortener.remote_repository.test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nubanktest/core/http/http_manager.dart' as _i2;
import 'package:nubanktest/data/datasource/shortener.data_source.dart' as _i5;
import 'package:nubanktest/data/models/original_url/original_url.model.dart'
    as _i4;
import 'package:nubanktest/data/models/short_url/short_url.model.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHttpManager_0 extends _i1.Fake implements _i2.HttpManager {}

class _FakeShortUrlModel_1 extends _i1.Fake implements _i3.ShortUrlModel {}

class _FakeOriginalUrlModel_2 extends _i1.Fake implements _i4.OriginalUrlModel {
}

/// A class which mocks [ShortenerDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortenerDataSourceImpl extends _i1.Mock
    implements _i5.ShortenerDataSourceImpl {
  MockShortenerDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpManager get httpManager =>
      (super.noSuchMethod(Invocation.getter(#httpManager),
          returnValue: _FakeHttpManager_0()) as _i2.HttpManager);
  @override
  _i6.Future<_i3.ShortUrlModel> shortUrl(String? urlToBeShortened) =>
      (super.noSuchMethod(Invocation.method(#shortUrl, [urlToBeShortened]),
              returnValue:
                  Future<_i3.ShortUrlModel>.value(_FakeShortUrlModel_1()))
          as _i6.Future<_i3.ShortUrlModel>);
  @override
  _i6.Future<_i4.OriginalUrlModel> getOriginalUrl(String? id) =>
      (super.noSuchMethod(Invocation.method(#getOriginalUrl, [id]),
              returnValue:
                  Future<_i4.OriginalUrlModel>.value(_FakeOriginalUrlModel_2()))
          as _i6.Future<_i4.OriginalUrlModel>);
}
